{	
	"Codigo para el mapeo de perfiles DTO": {
		"prefix": "cs-Profiles-MappingProfiles",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "using API.Dtos;",
		  "using AutoMapper;",
		  "using Core.Entities;",
		  "",
		  "namespace API.Profiles;",
		  "public class MappingProfiles : Profile",
		  "{",
		  "    public MappingProfiles()",
		  "    {",
		  "        CreateMap<Auditoria, AuditoriaDto>().ReverseMap();",
		  "    }",
		  "}"
		],
		"description": "Codigo para el mapeo de perfiles DTO"
	  }
	,"Codigo para generacion de DTO": {
		"prefix": "cs-Dtos-EntityDto",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "",
		  "namespace API.Dtos",
		  "{",
		  "    public class GenericosVsSubmodulosDto",
		  "    {",
		  "        public int Id { get; set; }",
		  "        public int IdGenerico { get; set; }",
		  "        public int IdSubmodulo { get; set; }",
		  "        public int IdRol { get; set; }",
		  "        public DateTime FechaCreacion { get; set; }",
		  "        public DateTime FechaModificacion { get; set; }",
		  "    }",
		  "}"
		],
		"description": "Codigo para generacion de DTO"
	  }
	,"Codigo para la extension ApplicationService": {
		"prefix": "cs-extensions-ApplicationServiceExtension",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "using AspNetCoreRateLimit;",
		  "using Core.Interfaces;",
		  "using Infrastructure.UnityOfWork;",
		  "// using Core.Interfaces;",
		  "// using Infrastructure.UnitOfWork;",
		  "",
		  "namespace ApiAnimals.Extensions",
		  "{",
		  "    public static class ApplicationServiceExtension",
		  "    {",
		  "        public static void ConfigureCors(this IServiceCollection services) =>",
		  "            services.AddCors(options =>",
		  "            {",
		  "                options.AddPolicy(",
		  "                    \"CorsPolicy\",",
		  "                    builder =>",
		  "                        builder",
		  "                            .AllowAnyOrigin() //WithOrigins(\"https://domini.com\")",
		  "                            .AllowAnyMethod() //WithMethods(*GET\", \"POST\")",
		  "                            .AllowAnyHeader()",
		  "                ); //WithHeaders(*accept*, \"content-type\")",
		  "            });",
		  "",
		  "        public static void AddApplicationServices(this IServiceCollection services)",
		  "        {",
		  "            services.AddScoped<IUnityOfWork, UnityOfWork>();",
		  "        }",
		  "",
		  "        public static void ConfigureRatelimiting(this IServiceCollection services)",
		  "        {",
		  "            services.AddMemoryCache();",
		  "            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
		  "            services.AddInMemoryRateLimiting();",
		  "            services.Configure<IpRateLimitOptions>(options =>",
		  "            {",
		  "                options.EnableEndpointRateLimiting = true;",
		  "                options.StackBlockedRequests = false;",
		  "                options.HttpStatusCode = 429;",
		  "                options.RealIpHeader = \"X-Real-IP\";",
		  "                options.GeneralRules = new List<RateLimitRule>",
		  "                {",
		  "                    new RateLimitRule",
		  "                    {",
		  "                        Endpoint = \"*\",",
		  "                        Period = \"10s\",",
		  "                        Limit = 2",
		  "                    }",
		  "                };",
		  "            });",
		  "        }",
		  "    }",
		  "}",
		  ""
		],
		"description": "Codigo para la extension ApplicationService"
	  }
	,"Codigo para la interface de unidad de trabajo": {
		"prefix": "cs-interface-IUnitOfwork",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "",
		  "namespace Core.Interfaces;",
		  "",
		  "public interface IUnityOfWork",
		  "{",
		  "",
		  "    IAuditoriaRepository Auditorias { get; }",
		  "    IBlockChainRepository Blockchains { get; }",
		  "    IEstadoNotificacionRepository EstadosNotificaciones { get; }",
		  "    IFormatosRepository Formatos { get; }",
		  "    IGenericosVsSubmodulosRepository GenericosVsSubmodulos { get; }",
		  "    IHiloRespuestaNotificacionRepository HiloRespuestasNotificaciones { get; }",
		  "    IMaestrosVsSubmodulosRepository MaestrosVsSubmodulos { get; }",
		  "    IModuloNotificacionesRepository ModulosNotificaciones { get; }",
		  "    IModulosMaestrosRepository ModulosMaestros { get; }",
		  "    IPermisosGenericosRepository PermisosGenericos { get; }",
		  "    IRadicadosRepository Radicados { get; }",
		  "    IRolRepository Roles { get; }",
		  "    IRolVsMaestroRepository RolVsMaestros { get; }",
		  "    ISubmodulosRepository Submodulos { get; }",
		  "    ITipoNotificacionesRepository TiposNotificaciones { get; }",
		  "    ITipoRequerimientoRepository TiposRequerimientos { get; }",
		  "    Task<int> SaveAsync();",
		  "}",
		  ""
		],
		"description": "Codigo para la interface de unidad de trabajo"
	  },
	"Codigo para la configuracion de una entidad": {
		"prefix": "cs-configuration",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Security.Cryptography.X509Certificates;",
		  "using System.Threading.Tasks;",
		  "using Core.Entities;",
		  "using Microsoft.EntityFrameworkCore;",
		  "using Microsoft.EntityFrameworkCore.Metadata.Builders;",
		  "",
		  "namespace Infrastructure.Data.Configuration",
		  "{",
		  "    public class ModuloNotificacionesConfiguration : IEntityTypeConfiguration<ModuloNotificaciones>",
		  "    {",
		  "        public void Configure(EntityTypeBuilder<ModuloNotificaciones> builder)",
		  "        {",
		  "            builder.ToTable(\"ModuloNotificaciones\");",
		  "",
		  "            builder.HasKey(x => x.Id);",
		  "            builder.Property(x => x.Id).HasColumnName(\"Id\");",
		  "            builder.Property(x => x.AsuntoNotificacion).HasMaxLength(80).IsRequired();",
		  "            builder.Property(x => x.FechaCreacion);",
		  "            builder.Property(x => x.FechaModificacion);",
		  "",
		  "",
		  "            builder.HasOne(M => M.Radicados)",
		  "            .WithMany(N => N.ModuloNotificaciones)",
		  "            .HasForeignKey(M => M.IdRadicado);",
		  "",
		  "            builder.HasOne(M => M.Formatos)",
		  "            .WithMany(F => F.ModuloNotificaciones)",
		  "            .HasForeignKey(M => M.IdFormato);",
		  "",
		  "            builder.HasOne(M => M.TipoRequerimientos)",
		  "            .WithMany(T => T.ModuloNotificaciones)",
		  "            .HasForeignKey(M => M.IdRequerimiento);",
		  "",
		  "            builder.HasOne(M => M.TipoNotificaciones)",
		  "            .WithMany(T => T.ModuloNotificaciones)",
		  "            .HasForeignKey(M => M.IdTipoNotificacion);",
		  "",
		  "            builder.HasOne(M => M.HiloRespuestaNotificaciones)",
		  "            .WithMany(H => H.ModuloNotificaciones)",
		  "            .HasForeignKey(M => M.IdhiloRespuesta);",
		  "",
		  "            builder.HasOne(M => M.EstadoNotificaciones)",
		  "            .WithMany(E => E.ModuloNotificaciones)",
		  "            .HasForeignKey(M => M.IdEstadoNotificacion);",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Codigo para la configuracion de una entidad"
	  }
,
	"Codigo de Unidad de trabajo": {
		"prefix": "cs-unitofwork",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "using Core.Interfaces;",
		  "using Infrastructure.Data;",
		  "using Infrastructure.Repositories;",
		  "",
		  "namespace Infrastructure.UnityOfWork;",
		  "",
		  "public class UnityOfWork : IUnityOfWork, IDisposable",
		  "{",
		  "    private readonly NotiAPIContext _context;",
		  "    private AuditoriaRepository _auditorias;",
		  "    private BlockChainRepository _blockchains;",
		  "    private EstadoNotificacionesRepository _estadosnotificaciones;",
		  "    private FormatosRepository _formatos;",
		  "    private GenericosVsSubmodulosRepository _genericosvssubmodulos;",
		  "    private HiloRespuestaNotificacionRepository _hilorespuestasnotificaciones;",
		  "    private MaestrosVsSubmodulosRepository _maestrosvssubmodulos;",
		  "    private ModuloNotificacionesRepository _modulosnotificaciones;",
		  "    private ModulosMaestrosRepository _modulosmaestros;",
		  "    private PermisosGenericosRepository _permisosgenericos;",
		  "    private RadicadosRepository _radicados;",
		  "    private RolRepository _roles;",
		  "    private RolVsMaestroRepository _rolvsmaestros;",
		  "    private SubModulosRepository _submodulos;",
		  "    private TipoNotificacionesRepository _tiposnotificaciones;",
		  "    private TipoRequerimientoRepository _tiposrequerimientos;",
		  "",
		  "    public IAuditoriaRepository Auditorias",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_auditorias == null)",
		  "            {",
		  "                _auditorias = new AuditoriaRepository(_context);",
		  "            }",
		  "            return _auditorias;",
		  "        }",
		  "    }",
		  "",
		  "    public IBlockChainRepository Blockchains",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_blockchains == null)",
		  "            {",
		  "                _blockchains = new BlockChainRepository(_context);",
		  "            }",
		  "            return _blockchains;",
		  "        }",
		  "    }",
		  "",
		  "    public IEstadoNotificacionRepository EstadosNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_estadosnotificaciones == null)",
		  "            {",
		  "                _estadosnotificaciones = new EstadoNotificacionesRepository(_context);",
		  "            }",
		  "            return _estadosnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public IFormatosRepository Formatos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_formatos == null)",
		  "            {",
		  "                _formatos = new FormatosRepository(_context);",
		  "            }",
		  "            return _formatos;",
		  "        }",
		  "    }",
		  "",
		  "    public IGenericosVsSubmodulosRepository GenericosVsSubmodulos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_genericosvssubmodulos == null)",
		  "            {",
		  "                _genericosvssubmodulos = new GenericosVsSubmodulosRepository(_context);",
		  "            }",
		  "            return (IGenericosVsSubmodulosRepository)_genericosvssubmodulos;",
		  "        }",
		  "    }",
		  "",
		  "    public IHiloRespuestaNotificacionRepository HiloRespuestasNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_hilorespuestasnotificaciones == null)",
		  "            {",
		  "                _hilorespuestasnotificaciones = new HiloRespuestaNotificacionRepository(_context);",
		  "            }",
		  "            return _hilorespuestasnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public IMaestrosVsSubmodulosRepository MaestrosVsSubmodulos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_maestrosvssubmodulos == null)",
		  "            {",
		  "                _maestrosvssubmodulos = new MaestrosVsSubmodulosRepository(_context);",
		  "            }",
		  "            return (IMaestrosVsSubmodulosRepository)_maestrosvssubmodulos;",
		  "        }",
		  "    }",
		  "",
		  "    public IModuloNotificacionesRepository ModulosNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_modulosnotificaciones == null)",
		  "            {",
		  "                _modulosnotificaciones = new ModuloNotificacionesRepository(_context);",
		  "            }",
		  "            return _modulosnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public IModulosMaestrosRepository ModulosMaestros",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_modulosmaestros == null)",
		  "            {",
		  "                _modulosmaestros = new ModulosMaestrosRepository(_context);",
		  "            }",
		  "            return _modulosmaestros;",
		  "        }",
		  "    }",
		  "    public IPermisosGenericosRepository PermisosGenericos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_permisosgenericos == null)",
		  "            {",
		  "                _permisosgenericos = new PermisosGenericosRepository(_context);",
		  "            }",
		  "            return _permisosgenericos;",
		  "        }",
		  "    }",
		  "",
		  "    public IRadicadosRepository Radicados",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_radicados == null)",
		  "            {",
		  "                _radicados = new RadicadosRepository(_context);",
		  "            }",
		  "            return _radicados;",
		  "        }",
		  "    }",
		  "",
		  "    public IRolRepository Roles",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_roles == null)",
		  "            {",
		  "                _roles = new RolRepository(_context);",
		  "            }",
		  "            return _roles;",
		  "        }",
		  "    }",
		  "",
		  "    public IRolVsMaestroRepository RolVsMaestros",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_rolvsmaestros == null)",
		  "            {",
		  "                _rolvsmaestros = new RolVsMaestroRepository(_context);",
		  "            }",
		  "            return _rolvsmaestros;",
		  "        }",
		  "    }",
		  "",
		  "    public ISubmodulosRepository Submodulos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_submodulos == null)",
		  "            {",
		  "                _submodulos = new SubModulosRepository(_context);",
		  "            }",
		  "            return (ISubmodulosRepository)_submodulos;",
		  "        }",
		  "    }",
		  "",
		  "    public ITipoNotificacionesRepository TiposNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_tiposnotificaciones == null)",
		  "            {",
		  "                _tiposnotificaciones = new TipoNotificacionesRepository(_context);",
		  "            }",
		  "            return _tiposnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public ITipoRequerimientoRepository TiposRequerimientos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_tiposrequerimientos == null)",
		  "            {",
		  "                _tiposrequerimientos = new TipoRequerimientoRepository(_context);",
		  "            }",
		  "            return (ITipoRequerimientoRepository)_tiposrequerimientos;",
		  "        }",
		  "    }",
		  "    public UnityOfWork(NotiAPIContext context)",
		  "    {",
		  "        _context = context;",
		  "    }",
		  "",
		  "    public async Task<int> SaveAsync()",
		  "    {",
		  "        return await _context.SaveChangesAsync();",
		  "    }",
		  "",
		  "    public void Dispose()",
		  "    {",
		  "        _context.Dispose();",
		  "    }",
		  "}",
		  ""
		],
		"description": "Codigo de Unidad de trabajo"
	  },


"Comandos de Migracion": {
		"prefix": "cs-migrations",
		"body": [
		"dotnet ef migrations add InitialCreate --project ./Infraestructura/ --startup-project ./API/ --output-dir ./Data/Migrations  // migracion Base de datos ",
		"dotnet ef database update --project ./Infraestructura/ --startup-project ./API/ // Actualizar Base de datos ",
		"dotnet run  --project API/ //Comando Para correr el proyecto",
		"dotnet tool install --global dotnet-ef"
		],
		"description": "Comandos de Migracion"
	},
	"metodos de interaccion con base de datos": {
		"prefix": "cs-genericRepository",
		"body": [
		  "public interface IGenericRepository<T> where T : BaseEntity",
		  "    {",
		  "        Task<T> GetByIdAsync(int id);",
		  "        Task<IEnumerable<T>> GetAllAsync();",
		  "        Task<IEnumerable<T>> Find(Expression<Func<T, bool>> expression);",
		  "        void Add(T entity);",
		  "        void AddRange(IEnumerable<T> entities);",
		  "        void RemoveRange(IEnumerable<T> entity);",
		  "        void Remove(T entity);",
		  "        void Update(T entity);",
		  "    }"
		],
		"description": "metodos de interaccion con base de datos"
	  },
	  "Genera el la clase de repositorio implementando las interfaces": {
		"prefix": "cs-r-EntidadRepository",
		"body": [
		  "namespace Infrastructure.Repositories",
		  "{",
		  "    public class EstadoNotificacionesRepository : GenericRepository<EstadoNotificacion>, IEstadoNotificacionRepository",
		  "    {",
		  "        private readonly NotiAPIContext _context;",
		  "        public EstadoNotificacionesRepository(NotiAPIContext context) : base(context)",
		  "        {",
		  "            _context = context;",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Genera el la clase de repositorio implementando las interfaces"
	  },
	  "Generacion de interfaz de repositorio de una entidad": {
		"prefix": "cs-Interfaces-EntidadRepository",
		"body": [
		  "public interface IAuditoriaRepository : IGenericRepository<Auditoria>",
		  "    {",
		  "        ",
		  "    }"
		],
		"description": "Generacion de interfaz de repositorio de una entidad"
	  },
	 
	"Genera el helper de paginacion en los Helpers de API": {
		"prefix": "cs-helpers-pager",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "",
		  "namespace ApiAnimals.Helpers;",
		  "",
		  "public class Params",
		  "{",
		  "    private int _pageSize = 5;",
		  "    private const int MaxPageSize = 50;",
		  "    private int _pageIndex = 1;",
		  "    private string _search;",
		  "    public int PageSize",
		  "    {",
		  "        get => _pageSize;",
		  "        set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;",
		  "    }",
		  "    public int PageIndex",
		  "    {",
		  "        get => _pageIndex;",
		  "        set => _pageIndex = (value <= 0) ? 1 : value;",
		  "    }",
		  "    public string Search",
		  "    {",
		  "        get => _search;",
		  "        set => _search = (!String.IsNullOrEmpty(value)) ? value.ToLower() : \"\";",
		  "    }",
		  "}"
		],
		"description": "Genera el helper de paginacion en los Helpers de API"
	  },
	  "Genera el helper de params en los Helpers de API": {
		"prefix": "cs-helpers-params",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Threading.Tasks;",
		  "",
		  "namespace ApiAnimals.Helpers;",
		  "",
		  "public class Params",
		  "{",
		  "    private int _pageSize = 5;",
		  "    private const int MaxPageSize = 50;",
		  "    private int _pageIndex = 1;",
		  "    private string _search;",
		  "    public int PageSize",
		  "    {",
		  "        get => _pageSize;",
		  "        set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;",
		  "    }",
		  "    public int PageIndex",
		  "    {",
		  "        get => _pageIndex;",
		  "        set => _pageIndex = (value <= 0) ? 1 : value;",
		  "    }",
		  "    public string Search",
		  "    {",
		  "        get => _search;",
		  "        set => _search = (!String.IsNullOrEmpty(value)) ? value.ToLower() : \"\";",
		  "    }",
		  "}"
		],
		"description": "Genera el helper de params en los Helpers de API"
	  }, 
	  "Genera los metodos para poder hacer las consultas desde los controladores": {
		"prefix": "cs-repositories-GenericRepository",
		"body": [
		  "using System;",
		  "using System.Collections.Generic;",
		  "using System.Linq;",
		  "using System.Linq.Expressions;",
		  "using System.Threading.Tasks;",
		  "using Core.Entities;",
		  "using Core.Interfaces;",
		  "using Infrastructure.Data;",
		  "using Microsoft.EntityFrameworkCore;",
		  "",
		  "namespace Infrastructure.Repositories",
		  "{",
		  "    public class GenericRepository<T> : IGenericRepository<T>",
		  "        where T : BaseEntity",
		  "    {",
		  "        private readonly NotiAPIContext _context;",
		  "",
		  "        public GenericRepository(NotiAPIContext context)",
		  "        {",
		  "            _context = context;",
		  "        }",
		  "",
		  "        public virtual void Add(T entity)",
		  "        {",
		  "            _context.Set<T>().Add(entity);",
		  "        }",
		  "",
		  "        public virtual void AddRange(IEnumerable<T> entities)",
		  "        {",
		  "            _context.Set<T>().AddRange(entities);",
		  "        }",
		  "",
		  "        public virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
		  "        {",
		  "            return _context.Set<T>().Where(expression);",
		  "        }",
		  "",
		  "        public virtual async Task<IEnumerable<T>> GetAllAsync()",
		  "        {",
		  "            return await _context.Set<T>().ToListAsync();",
		  "            //return (IEnumerable<T>)await _context.Paises.FromSqlRaw(\"SELECT * FROM pais\").ToListAsync();",
		  "        }",
		  "",
		  "        public virtual async Task<T> GetByIdAsync(int id)",
		  "        {",
		  "            return await _context.Set<T>().FindAsync(id);",
		  "        }",
		  "",
		  "        public virtual async Task<T> GetByIdAsync(string id)",
		  "        {",
		  "            return await _context.Set<T>().FindAsync(id);",
		  "        }",
		  "        public virtual void Remove(T entity)",
		  "        {",
		  "            _context.Set<T>().Remove(entity);",
		  "        }",
		  "        public virtual void RemoveRange(IEnumerable<T> entities)",
		  "        {",
		  "            _context.Set<T>().RemoveRange(entities);",
		  "        }",
		  "        public virtual void Update(T entity)",
		  "        {",
		  "            _context.Set<T>().Update(entity);",
		  "        }",
		  "        public virtual async Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(",
		  "            int pageIndex,",
		  "            int pageSize,",
		  "            string _search)",
		  "        {",
		  "            var totalRegistros = await _context.Set<T>().CountAsync();",
		  "            var registros = await _context",
		  "                .Set<T>()",
		  "                .Skip((pageIndex - 1) * pageSize)",
		  "                .Take(pageSize)",
		  "                .ToListAsync();",
		  "            return (totalRegistros, registros);",
		  "        }",
		  "",
		  "        Task<IEnumerable<T>> IGenericRepository<T>.Find(Expression<Func<T, bool>> expression)",
		  "        {",
		  "            throw new NotImplementedException();",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Genera los metodos para poder hacer las consultas desde los controladores"
	  },
	  
			"Creates a HelloWorld sample":{
				"prefix": "#helloworld",
				"body": [
					"using System;",
					"",
					"namespace ConsoleApp",
					"{",
					"\tpublic class Program",
					"\t{",
					"\t\tpublic static void Main(string[] args)",
					"\t\t{",
					"\t\t\tConsole.WriteLine(\"Hello World!\");",
					"\t\t}",
					"\t}",
					"}"
					],
				"description": "Creates a HelloWorld sample"
			},
			"Creates a destructor for the containing class":{
				"prefix": "~",
				"body": [
					"~${1:Program}()",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a destructor for the containing class"
			},
			"Creates a call to Clear":{
				"prefix": "cclear",
				"body": [
					"Console.Clear();",
					"$0"
				],
				"description": "Creates a call to Clear"
			},
			"General output to console":{
				"prefix": "cgo",
				"body": [
					"Console.WriteLine(\"Console app started\");",
					"",
					"$0",
					"Console.WriteLine(\"Press any key to exit...\");",
					"Console.ReadKey(true);"
				],
				"description": "General output to console"
			},
			"Creates a class":{
				"prefix": "class",
				"body": [
					"public class ${1:MyClass}",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a class"
			},
			"Creates an abstract class declaration":{
				"prefix": "classa",
				"body": [
					"public abstract class ${1:MyClass}",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates an abstract class declaration"
			},
			"Creates a disposable class":{
				"prefix": "classd",
				"body": [
					"public class ${1:MyClass} : IDisposable",
					"{",
					"",
					"\tpublic void Dispose()",
					"\t{",
					"\t\tGC.SuppressFinalize(this);",
					"\t}",
					"",
					"\t$0",
					"}"
					],
				"description": "Creates a disposable class"
			},
			"Creates a constant":{
				"prefix": "const",
				"body": [
					"${1:public} const ${2:string} ${3:CONSTANT_NAME} = \"${4:value}\";",
					"$0"
					],
				"description": "Creates a constant"
			},
			"Creates a call to ReadLine":{
				"prefix": "cr",
				"body": [
					"Console.ReadLine();",
					"$0"
					],
				"description": "Creates a call to ReadLine"
			},
			"Creates a call to ReadKey":{
				"prefix": "crk",
				"body": [
					"Console.ReadKey();",
					"$0"
					],
				"description": "Creates a call to ReadKey"
			},
			"Creates a call to WriteLine":{
				"prefix": "cwl",
				"body": [
					"Console.WriteLine($\"${1:Text}\");",
					"$0"
					],
				"description": "Creates a call to WriteLine"
			},
			"Creates a do while loop":{
				"prefix": "dowhile",
				"body": [
					"do",
					"{",
					"\t$0",
					"} while (${1:true})"
					],
				"description": "Creates a do while loop"
			},
			"Creates an else statement":{
				"prefix": "else",
				"body": [
					"else",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates an else statement"
			},	
			"Creates an enum type":{
				"prefix": "enum",
				"body": [
					"public enum ${1:MyEnumType}",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates an enum type"
			},	
			"Creates an exception class":{
				"prefix": "exception",
				"body": [
					"public class ${1:MyException} : System.Exception",
					"{",
					"\tpublic $1() {}",
					"\tpublic $1(string message) : base(message) {}",
					"\tpublic $1(string message, System.Exception inner) : base(message, inner) {}",
					"\tpublic $1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context) {}",
					"}"
					],
				"description": "Creates an exception class"
			},	
			"Creates a for loop":{
				"prefix": "for",
				"body": [
					"for (var ${1:i} = 0; $1 < ${2:length}; $1++)",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a for loop"
			},
			"Creates a foreach statement":{
				"prefix": "foreach",
				"body": [
					"foreach (var ${1:item} in ${2:collection})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a foreach statement"
			},
			"Creates a new instance of the Guid structure":{
				"prefix": "guid",
				"body": [
					"Guid ${1:guid} = Guid.NewGuid();",
					"$0"
					],
				"description": "Creates a new instance of the Guid structure"
			},
			"Creates as string, a new instance of the Guid structure without hyphens":{
				"prefix": "guidn",
				"body": [
					"string ${1:guid} = Guid.NewGuid().ToString(\"N\");",
					"$0"
					],
				"description": "Creates as string, a new instance of the Guid structure without hyphens"
			},
			"Creates an if statement":{
				"prefix": "if",
				"body": [
					"if (${1:true})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates an if statement"
			},
			"Creates an if else statement":{
				"prefix": "ifelse",
				"body": [
					"if (${1:true})",
					"{",
					"\t$0",
					"}",
					"else",
					"{",
					"\t",
					"}"
					],
				"description": "Creates an if else statement"
			},
			"Creates a conditional operator":{
				"prefix": "iif",
				"body": [
					"var ${1:value} = ${2:true};",
					"var ${3:result} = (${1} ? ${4:true} : ${5:false});",
					"$0"
					],
				"description": "Creates a conditional operator"
			},
			"Creates an immutable object":{
				"prefix": "immutable",
				"body": [
					"${1:public} class ${2:ImmutableObject}",
					"{",
					"\tprivate readonly ${3:string} ${4:_name};",
					"\tpublic $3 ${5:Name} => $4",
					"",
					"\tpublic $2($3 ${6:name})",
					"\t{",
					"\t\t$4 = $6;",
					"\t}",
					"}"
					],
				"description": "Creates an immutable object"
			},
			"Creates an interface":{
				"prefix": "interface",
				"body": [
					"public interface I${1:MyInterface}",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates an interface"
			},	
			"Creates a LINQ Distinct sentence":{
				"prefix": "linq_distinct",
				"body": [
					"${1:var} ${2:data} = (from ${3:item} in ${4:collection}",
					"\t\t\tselect $3).Distinct()"
					],
				"description": "Creates a LINQ Distinct sentence"
			},
			"Creates a LINQ Where sentence":{
				"prefix": "linq_where",
				"body": [
					"${1:var} ${2:data} = from ${3:item} in ${4:collection}",
					"\t\t\twhere $3.${5:FieldName}.${6:Contains}(\"${7:Text}\")",
					"\t\t\tselect $3;"
					],
				"description": "Creates a LINQ Where sentence"
			},
			"Creates a lock statement":{
				"prefix": "lock",
				"body": [
					"lock (${1:true})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a lock statement"
			},	
			"Creates a Console Main structure":{
				"prefix": "main",
				"body": [
					"public static void Main(string[] args)",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a Console Main structure"
			},	
			"Creates a Method structure":{
				"prefix": "method",
				"body": [
					"${1:public} ${2:void} ${3:MyMethod}(${4:string} ${5:parameter})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a Method structure"
			},	
			"Creates an Async Method structure":{
				"prefix": "method_async",
				"body": [
					"${1:public} async ${2:Task}<${3:object}> ${4:MyMethodAsync}(${5:string} ${6:parameter})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates an async Method structure"
			},	
			"Creates a Windows Message Box":{
				"prefix": "msgbox",
				"body": [
					"System.Windows.Forms.MessageBox.Show(\"${1:Hello}\");",
					"$0"
					],
				"description": "Creates a Windows Message Box"
			},	
			"Creates a Namespace":{
				"prefix": "namespace",
				"body": [
					"namespace ${1:MyNamespace}",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a Namespace"
			},	
			"Creates a property": {
				"prefix": "prop",
				"body": [
					"${1:public} ${2:string} ${3:Name} { get; set; }",
					"",
					"$0"
					],
				"description": "Creates a property"
			},
			"Creates an immutable property": {
				"prefix": "propi",
				"body": [
					"private readonly ${1:string} ${2:_name};",
					"",
					"public $1 ${3:Name} => $2;",
					"$0"
					],
				"description": "Creates an immutable property"
			},
			"Creates an init property": {
				"prefix": "propinit",
				"body": [
					"public ${1:string} ${2:Name} { get; init; }",
					"",
					"$0"
					],
				"description": "Creates an init property"
			},
			"Creates a property read-only": {
				"prefix": "propr",
				"body": [
					"public ${1:string} ${2:Name} { get; private set; }",
					"",
					"$0"
					],
				"description": "Creates a property read-only"
			},
			"Creates a public string method declaration": {
				"prefix": "pum",
				"body": [
					"public ${1:string} ${2:Method}(${3:string} ${4:parameter})",
					"{",
					"\t$0",
					"\treturn System.NotImplementedException;",
					"}"
					],
				"description": "Creates a public string method declaration"
			},
			"Creates a public void method declaration": {
				"prefix": "pvm",
				"body": [
					"public void ${1:Method}(${2:string} ${3:parameter})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a public void method declaration"
			},
			"Creates a record type":{
				"prefix": "record",
				"body": [
					"public record Person(${1:string} ${2:Name});"
					],
				"description": "Creates a record type"
			},
			"Creates a record type with deconstructor":{
				"prefix": "recordd",
				"body": [
					"public record Person",
					"{",
					"\tpublic Person(${1:string} ${2:name}, ${3:int} ${4:age}) => (${5:Name}, ${6:Age}) = ($2, $4);",
					"",
					"\tpublic $1 $5 { get; set; }",
					"\tpublic $3 $6 { get; set; }",
					"",
					"public void Deconstructor(out $1 $2, out $3 $4) => ($2, $4) = ($5, $6);",
					"}"
					],
				"description": "Creates a record type with deconstructor"
			},
			"Creates a singleton class": {
				"prefix": "singleton",
				"body": [
					"public sealed class ${1:MyClass}",
					"{",
					"\tprivate static volatile I${2:MyObject} instance;",
					"\tprivate static Object syncRootObject = new Object();",
					"",
					"\tpublic static I${2} Instance",
					"\t{",
					"\t\tget",
					"\t\t{",
					"\t\t\tif (instance == null)",
					"\t\t\t{",
					"\t\t\t\tlock (syncRootObject)",
					"\t\t\t\t{",
					"\t\t\t\t\tif (instance == null)",
					"\t\t\t\t\t{",
					"\t\t\t\t\t\tinstance = new $0${3:MyObject}();",
					"\t\t\t\t\t}",
					"\t\t\t\t}",
					"\t\t\t}",
					"\t\t\treturn instance;",
					"\t\t}",
					"\t}",
					"}"
					],
				"description": "Creates a singleton class"
			},
			"Creates a singleton class with System.Lazy<T>": {
				"prefix": "singletonl",
				"body": [
					"public sealed class ${1:MyClass} : I${2:MyObject}",
					"{",
					"\tprivate static readonly Lazy<I${2}> _instance = new Lazy<I${2}>(() => new ${1}());",
					"",
					"\tpublic static I${2} Instance { get { return _instance.Value; } }",
					"\t",
					"\tprivate ${1}()",
					"\t{",
					"\t}",
					"}"
					],
				"description": "Creates a singleton class with System.Lazy<T>"
			},
			"Creates a singleton class as thread-safe without using locks": {
				"prefix": "singletonts",
				"body": [
					"public sealed class ${1:MyClass} : I${2:MyObject}",
					"{",
					"\tprivate static readonly I${2} _instance = new ${1}();",
					"",
					"\tstatic ${1}() {}",
					"",
					"\tprivate ${1}() {}",
					"",
					"\tpublic static I${2} Instance { get { return _instance; } }",
					"\t",
					"}"
					],
				"description": "Creates a singleton class as thread-safe without using locks"
			},
			"Creates a struct": {
				"prefix": "struct",
				"body": [
					"public struct ${1:MyStruct}",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a struct"
			},
			"Creates a switch statement": {
				"prefix": "switch",
				"body": [
					"switch (${1:value})",
					"{",
					"\tcase ${2:value1}:",
					"\t\tbreak;",
					"\tdefault:",
					"\t\tbreak;",
					"}",
					"$0"
					],
				"description": "Creates a switch statement"
			},
			"Creates a C# 9 top-level statement": {
				"prefix": "tls",
				"body": [
					"System.Console.WriteLine(\"${1:Hello World!}\");"
					],
				"description": "Creates a C# 9 top-level statement"
			},
			"Creates a TODO comment": {
				"prefix": "todo",
				"body": [
					"// TODO: $0"
					],
				"description": "Creates a TODO comment"
			},
			"Creates a try catch": {
				"prefix": "try",
				"body": [
					"try",
					"{",
					"\t$0",
					"}",
					"catch (${1:System.Exception} ex)",
					"{",
					"\t // TODO",
					"}"
					],
				"description": "Creates a try catch"
			},
			"Creates a try catch finally": {
				"prefix": "tryf",
				"body": [
					"try",
					"{",
					"\t$0",
					"}",
					"catch (${1:System.Exception} ex)",
					"{",
					"\t // TODO",
					"}",
					"finally",
					"{",
					"\t",
					"}"
					],
				"description": "Creates a try catch finally"
			},
			"Creates an using":{
				"prefix": "using",
				"body": [
					"using ${1:System}$0;"
					],
				"description": "Creates an using"
			},
			"Creates a while loop":{
				"prefix": "while",
				"body": [
					"while (${1:true})",
					"{",
					"\t$0",
					"}"
					],
				"description": "Creates a while loop"
			},
			"csproj Generator for .NET Core 1.0":{
				"prefix": "csproj_1.0",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk\">",
					"\t<PropertyGroup>",
					"\t\t<OutputType>Exe</OutputType>",
					"\t\t<TargetFramework>netcoreapp1.0</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "csproj Generator for .NET Core 1.0"
			},
			"csproj Generator for .NET Core 1.1":{
				"prefix": "csproj_1.1",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk\">",
					"\t<PropertyGroup>",
					"\t\t<OutputType>Exe</OutputType>",
					"\t\t<TargetFramework>netcoreapp1.1</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "csproj Generator for .NET Core 1.1"
			},
			"csproj Generator for .NET Core 2.0":{
				"prefix": "csproj_2.0",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk\">",
					"\t<PropertyGroup>",
					"\t\t<OutputType>Exe</OutputType>",
					"\t\t<TargetFramework>netcoreapp2.0</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "csproj Generator for .NET Core 2.0"
			},
			"csproj Generator for .NET Core 3.1":{
				"prefix": "csproj_3.1",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk\">",
					"\t<PropertyGroup>",
					"\t\t<OutputType>Exe</OutputType>",
					"\t\t<TargetFramework>netcoreapp3.1</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "csproj Generator for .NET Core 3.1"
			},
			"csproj Generator for .NET 5":{
				"prefix": "csproj_5",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk\">",
					"\t<PropertyGroup>",
					"\t\t<OutputType>Exe</OutputType>",
					"\t\t<TargetFramework>net5.0</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "csproj Generator for .NET 5"
			},	
			"sln Generator for Visual Studio 2017 (.NET Core and ASP.NET Core)":{
				"prefix": "sln_2017",
				"body": [
					"Microsoft Visual Studio Solution File, Format Version 12.00",
					"# Visual Studio 15",
					"VisualStudioVersion = 15.0.26124.0",
					"MinimumVisualStudioVersion = 15.0.26124.0",
					"Project(\"{${1:FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"${2:SolutionName}\", \"$2\\\\${3:ProjectName}.csproj\", \"{${4:3E6CAA7F-C72A-428D-91C8-74ADBD56D3CA}}\"",
					"EndProject",
					"Global",
					"\tGlobalSection(SolutionConfigurationPlatforms) = preSolution",
					"\t\tDebug|Any CPU = Debug|Any CPU",
					"\t\tDebug|x64 = Debug|x64",
					"\t\tDebug|x86 = Debug|x86",
					"\t\tRelease|Any CPU = Release|Any CPU",
					"\t\tRelease|x64 = Release|x64",
					"\t\tRelease|x86 = Release|x86",
					"\tEndGlobalSection",
					"\tGlobalSection(SolutionProperties) = preSolution",
					"\t\tHideSolutionNode = FALSE",
					"\tEndGlobalSection",
					"EndGlobal"
				],
				"description": "sln Generator for Visual Studio 2017 (.NET Core and ASP.NET Core)"
			},
			"sln Generator for Visual Studio 2019 (.NET Core and ASP.NET Core)":{
				"prefix": "sln_2019",
				"body": [
					"Microsoft Visual Studio Solution File, Format Version 12.00",
					"# Visual Studio Version 16",
					"VisualStudioVersion = 16.0.30711.63",
					"MinimumVisualStudioVersion = 10.0.40219.1",
					"Project(\"{${1:FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"${2:SolutionName}\", \"$2\\\\${3:ProjectName}.csproj\", \"{${4:3E6CAA7F-C72A-428D-91C8-74ADBD56D3CA}}\"",
					"EndProject",
					"Global",
					"\tGlobalSection(SolutionConfigurationPlatforms) = preSolution",
					"\t\tDebug|Any CPU = Debug|Any CPU",
					"\t\tDebug|x64 = Debug|x64",
					"\t\tDebug|x86 = Debug|x86",
					"\t\tRelease|Any CPU = Release|Any CPU",
					"\t\tRelease|x64 = Release|x64",
					"\t\tRelease|x86 = Release|x86",
					"\tEndGlobalSection",
					"\tGlobalSection(SolutionProperties) = preSolution",
					"\t\tHideSolutionNode = FALSE",
					"\tEndGlobalSection",
					"EndGlobal"
				],
				"description": "sln Generator for Visual Studio 2019 (.NET Core and ASP.NET Core)"
			},
			"Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code":{
				"prefix": "xml_<c>",
				"body": [
					"/// <c>${1:text}</c>"
				],
				"description": "Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code"
			},
			"Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code":{
				"prefix": "xml_<code>",
				"body": [
					"/// <code>",
					"/// ${1:content}",
					"/// </code>"
				],
				"description": "Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code"
			},
			"Xml Comment - <example> Lets you specify an example of how to use a method or other library member":{
				"prefix": "xml_<example>",
				"body": [
					"/// <example>",
					"/// ${1:description}",
					"/// </example>"
				],
				"description": "Xml Comment - <example> Lets you specify an example of how to use a method or other library member"
			},
			"Xml Comment - <exception> Lets you specify which exceptions can be thrown":{
				"prefix": "xml_<exception>",
				"body": [
					"/// <exception cref=\"${1:member}\">${2:description}</exception>"
				],
				"description": "Xml Comment - <exception> Lets you specify which exceptions can be thrown"
			},
			"Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code":{
				"prefix": "xml_<include>",
				"body": [
					"/// <include file='${1:filename}' path='${2:tagpath}[@name=\"${3:id}\"]' />"
				],
				"description": "Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code"
			},
			"Xml Comment - <list> A list or table can have as many <item> blocks as needed":{
				"prefix": "xml_<list>",
				"body": [
					"/// <list type=\"bullet\">",
					"///     <listheader>",
					"///        <term>${1:term}</term>",
					"///        <description>${2:description}</description>",
					"///     </listheader>",
					"///     <item>",
					"///        <term>${3:term}</term>",
					"///        <description>${4:description}</description>",
					"///     </item>",
					"/// </list>"
				],
				"description": "Xml Comment - <list> A list or table can have as many <item> blocks as needed"
			},
			"Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text":{
				"prefix": "xml_<para>",
				"body": [
					"/// <para>${1:content}</para>"
				],
				"description": "Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text"
			},
			"Xml Comment - <param> Should be used in the comment for a method declaration to describe one of the parameters for the method":{
				"prefix": "xml_<param>",
				"body": [
					"/// <param name=\"${1:name}\">${2:description}</param>"
				],
				"description": "Xml Comment - <param> Should be used in the comment for a method declaration to describe one of the parameters for the method"
			},
			"Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter":{
				"prefix": "xml_<paramref>",
				"body": [
					"/// <paramref name=\"${1:name}\"/>"
				],
				"description": "Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter"
			},
			"Xml Comment - <permission> Lets you document the access of a member":{
				"prefix": "xml_<permission>",
				"body": [
					"/// <permission cref=\"${1:member}\">${2:description}</permission>"
				],
				"description": "Xml Comment - <permission> Lets you document the access of a member"
			},
			"Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>":{
				"prefix": "xml_<remarks>",
				"body": [
					"/// <remarks>${1:description}</remarks>"
				],
				"description": "Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>"
			},
			"Xml Comment - <returns> Should be used in the comment for a method declaration to describe the return value":{
				"prefix": "xml_<returns>",
				"body": [
					"/// <returns>${1:description}</returns>"
				],
				"description": "Xml Comment - <returns> Should be used in the comment for a method declaration to describe the return value"
			},
			"Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section":{
				"prefix": "xml_<see>",
				"body": [
					"/// <see cref=\"${1:member}\"/>"
				],
				"description": "Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section"
			},
			"Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section":{
				"prefix": "xml_<seealso>",
				"body": [
					"/// <seealso cref=\"${1:member}\"/>"
				],
				"description": "Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section"
			},
			"Xml Comment - <summary> Should be used to describe a type or a type member":{
				"prefix": "xml_<summary>",
				"body": [
					"/// <summary>${1:description}</summary>"
				],
				"description": "Xml Comment - <summary> Should be used to describe a type or a type member"
			},
			"Xml Comment - <typeparam> Should be used in the comment for a generic type or method declaration to describe a type parameter":{
				"prefix": "xml_<typeparam>",
				"body": [
					"/// <typeparam name=\"${1:name}\">${2:description}</typeparam>"
				],
				"description": "Xml Comment - <typeparam> Should be used in the comment for a generic type or method declaration to describe a type parameter"
			},
			"Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics":{
				"prefix": "xml_<typeparamref>",
				"body": [
					"/// <typeparamref name=\"${1:name}\"/>"
				],
				"description": "Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics"
			},
			"Xml Comment - <value> Lets you describe the value that a property represents":{
				"prefix": "xml_<value>",
				"body": [
					"/// <value>${1:property-description}</value>"
				],
				"description": "Xml Comment - <value> Lets you describe the value that a property represents"
			},
			"ASP.NET Core 2.0 csproj Generator":{
				"prefix": "ac_csproj_2.0",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
					"\t<PropertyGroup>",
					"\t\t<TargetFramework>netcoreapp2.0</TargetFramework>",
					"\t</PropertyGroup>",
					"\t<ItemGroup>",
					"\t\t<Folder Include=\"wwwroot\\\" />",
					"\t</ItemGroup>",
					"\t<ItemGroup>",
					"\t\t<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />",
					"\t</ItemGroup>",
					"</Project>"
				],
				"description": "ASP.NET Core 2.0 csproj Generator"
			},
			"ASP.NET Core 2.1 csproj Generator":{
				"prefix": "ac_csproj_2.1",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
					"\t<PropertyGroup>",
					"\t\t<TargetFramework>netcoreapp2.1</TargetFramework>",
					"\t</PropertyGroup>",
					"\t<ItemGroup>",
					"\t\t<Folder Include=\"wwwroot\\\" />",
					"\t</ItemGroup>",
					"\t<ItemGroup>",
					"\t\t<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0\" />",
					"\t</ItemGroup>",
					"</Project>"
				],
				"description": "ASP.NET Core 2.1 csproj Generator"
			},
			"ASP.NET Core 3.1 csproj Generator":{
				"prefix": "ac_csproj_3.1",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
					"\t<PropertyGroup>",
					"\t\t<TargetFramework>netcoreapp3.1</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "ASP.NET Core 3.1 csproj Generator"
			},
			"ASP.NET 5 csproj Generator":{
				"prefix": "ac_csproj_5",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
					"\t<PropertyGroup>",
					"\t\t<TargetFramework>net5.0</TargetFramework>",
					"\t</PropertyGroup>",
					"</Project>"
				],
				"description": "ASP.NET Core 5 csproj Generator"
			},
			"ASP.NET Core - Creates a HelloWorld sample - Startup":{
				"prefix": "ac_#helloworld_Startup",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using Microsoft.AspNetCore.Builder;",
					"using Microsoft.AspNetCore.Hosting;",
					"using Microsoft.AspNetCore.Http;",
					"using Microsoft.Extensions.DependencyInjection;",
					"",
					"namespace WebApp",
					"{",
					"\tpublic class Startup",
					"\t{",
					"\t\tpublic void ConfigureServices(IServiceCollection services)",
					"\t\t{",
					"\t\t}",
					"",
					"\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env)",
					"\t\t{",
					"\t\t\tif (env.IsDevelopment())",
					"\t\t\t{",
					"\t\t\t\tapp.UseDeveloperExceptionPage();",
					"\t\t\t}",
					"",
					"\t\t\tapp.Run(async (context) =>",
					"\t\t\t{",
					"\t\t\t\tawait context.Response.WriteAsync(\"Hello World!\");",
					"\t\t\t});",
					"\t\t}",
					"\t}",
					"}"
					],
				"description": "ASP.NET Core - Creates a HelloWorld sample - Startup"
			},
			"ASP.NET Core - Creates a HelloWorld sample - WebApp":{
				"prefix": "ac_#helloworld_WebApp",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.IO;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using Microsoft.AspNetCore;",
					"using Microsoft.AspNetCore.Hosting;",
					"using Microsoft.Extensions.Configuration;",
					"using Microsoft.Extensions.Logging;",
					"",
					"namespace WebApp",
					"{",
					"\tpublic class Program",
					"\t{",
					"\t\tpublic static void Main(string[] args)",
					"\t\t{",
					"\t\t\tBuildWebHost(args).Run();",
					"\t\t}",
					"",
					"\t\tpublic static IWebHost BuildWebHost(string[] args) =>",
					"\t\tWebHost.CreateDefaultBuilder(args)",
					"\t\t\t.UseStartup<Startup>()",
					"\t\t\t.Build();",
					"\t}",
					"}"
					],
				"description": "ASP.NET Core - Creates a HelloWorld sample - WebApp"
			},
			"ASP.NET Core - Creates a HelloWorld sample - WebApi":{
				"prefix": "ac_#helloworld_WebApi",
				"body": [
					"using System;",
					"using Microsoft.AspNetCore;",
					"using Microsoft.AspNetCore.Builder;",
					"using Microsoft.AspNetCore.Http;",
					"using Microsoft.AspNetCore.Routing;",
					"",
					"Console.WriteLine(\"http://localhost:5000/hello/test\");",
					"WebHost.Start(routes => routes.MapGet(\"hello/{name}\", (request, response, data) => response.WriteAsync($\"Hello, {data.Values[\"name\"]}\")));",
					"Console.ReadKey();"
					],
				"description": "ASP.NET Core - Creates a HelloWorld sample - WebApi"
			},
			"ASP.NET Core - Creates a MVC/Api Action":{
				"prefix": "ac_action",
				"body": [
					"[${1:HttpGet}(nameof($2))]",
					"public async Task<IActionResult> ${2:ActionName}(${3:string} ${4:name})",
					"{",
					"\t$0",
					"\treturn Ok;",
					"}"
					],
				"description": "ASP.NET Core - Creates a MVC/Api Action"
			},
			"ASP.NET Core - Creates a comment block in ASP.NET":{
				"prefix": "ac_comment",
				"body": [
					"<%-- $0 -->"
					],
				"description": "ASP.NET Core - Creates a comment block in ASP.NET"
			},
			"ASP.NET Core - Creates a way to configure the JSON configuration provider":{
				"prefix": "ac_conf",
				"body": [
					"// Remember imports: using Microsoft.Extensions.Configuration;",
					"public IConfiguration Configuration { get; set; }",
					"",
					"public Startup(IConfiguration configuration)",
					"{",
					"\tConfiguration = configuration;",
					"}"
					],
				"description": "ASP.NET Core - Creates a way to configure the JSON configuration provider"
			},
			"ASP.NET Core - Creates a way to configure the JSON configuration provider with a custom config file":{
				"prefix": "ac_conf_file",
				"body": [
					"var builder = new ConfigurationBuilder()",
					".SetBasePath(env.ContentRootPath)",
					".AddJsonFile(\"${1:mySettings}.json\", optional: true, reloadOnChange: true);",
					"",
					"// Remember to create the property",
					"// public IConfiguration Configuration { get; set; }",
					"Configuration = builder.Build();"
					],
				"description": "ASP.NET Core - Creates a way to configure the JSON configuration provider with a custom config file"
			},
			"ASP.NET Core - Creates the base of a controller":{
				"prefix": "ac_controller",
				"body": [
					"namespace ${1:Name}.Controllers",
					"{",
					"",
					"\tusing Microsoft.AspNetCore.Mvc;",
					"",
					"\tpublic class ${2:Name}Controller : Controller",
					"\t{",
					"\t\tpublic IActionResult Index()",
					"\t\t{",
					"\t\t\treturn View();",
					"\t\t}",
					"",
					"\t\tpublic IActionResult ${3:Welcome}()",
					"\t\t{",
					"\t\t\tViewData[\"Message\"] = \"Your welcome message\";",
					"",
					"\t\t\treturn View();",
					"\t\t}",
					"\t}",
					"}"
					],
				"description": "ASP.NET Core - Creates the base of a controller"
			},
			"ASP.NET Core - Creates the Startup constructor to be used with the web hosting environment":{
				"prefix": "ac_startupenv",
				"body": [
					"public Startup(IHostingEnvironment env)",
					"{",
					"\tvar builder = new ConfigurationBuilder()",
					"\t\t.SetBasePath(env.ContentRootPath)",
					"\t\t.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)",
					"\t\t.AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)",
					"\t\t.AddEnvironmentVariables();",
					"",
					"\tConfiguration = builder.Build();",
					"}"
					],
				"description": "ASP.NET Core - Creates the Startup constructor to be used with the web hosting environment"
			},
			"ASP.NET Core Web Api - Creates the base of a controller":{
				"prefix": "api_controller",
				"body": [
					"namespace ${1:Name}.Controllers",
					"{",
					"",
					"\tusing Microsoft.AspNetCore.Mvc;",
					"",
					"\t[Route(\"api/[controller]\")]",
					"\t[ApiController]",
					"\tpublic class ${2:Name}Controller : ControllerBase",
					"\t{",
					"\t\t[HttpGet]",
					"\t\tpublic async Task<IActionResult> Get()",
					"\t\t{",
					"\t\t\t$0",
					"\t\t\treturn Ok();",
					"\t\t}",
					"\t}",
					"}"
					],
				"description": "ASP.NET Core Web Api - Creates the base of a controller"
			},
			"ASP.NET Core Web Api - Creates the Delete Action of the WebApi":{
				"prefix": "api_delete",
				"body": [
					"[HttpDelete(\"{${1:value}\\}\")]",
					"public async Task ${2:DeleteAsync}(${3:string} $1)",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Web Api - Creates the Delete Action of the WebApi"
			},
			"ASP.NET Core Web Api - Creates the Get Action of the WebApi":{
				"prefix": "api_get",
				"body": [
					"[HttpGet(\"{${1:value}\\}\")]",
					"public async Task<ActionResult<${2:string}>> ${3:GetAsync}(${4:string} $1)",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Web Api - Creates the Get Action of the WebApi"
			},
			"ASP.NET Core Web Api - Creates the Put Action of the WebApi":{
				"prefix": "api_put",
				"body": [
					"[HttpPut(\"{${1:value}\\}\")]",
					"public async Task ${2:PutAsync}(${3:string} $1)",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Web Api - Creates the Put Action of the WebApi"
			},
			"ASP.NET Core Web Api - Creates the Post Action of the WebApi":{
				"prefix": "api_post",
				"body": [
					"[HttpPost(\"{${1:value}\\}\")]",
					"public async Task ${2:PostAsync}([FromBody] ${3:string} $1)",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Web Api - Creates the Post Action of the WebApi"
			},
			"ASP.NET Core Razor - Creates a code block for Razor":{
				"prefix": "rz_code",
				"body": [
					"@code {",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a code block for Razor"
			},
			"ASP.NET Core Razor - Creates a comment block for Razor":{
				"prefix": "rz_comment",
				"body": [
					"@* $0 *@"
					],
				"description": "ASP.NET Core Razor - Creates a comment block for Razor"
			},
			"ASP.NET Core Razor - Creates a directive block for Razor":{
				"prefix": "rz_directive",
				"body": [
					"@{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a directive block for Razor"
			},
			"ASP.NET Core Razor - Creates a do while loop for Razor": {
				"prefix": "rz_dowhile",
				"body": [
					"@{ var ${1:flag} = ${2:true}; }",
					"@do",
					"{",
					"\t$0",
					"} while ($1)"
					],
				"description": "ASP.NET Core Razor - Creates a do while loop for Razor"
			},	
			"ASP.NET Core Razor - Creates a for statement for Razor":{
				"prefix": "rz_for",
				"body": [
					"@for (var ${1:i} = 0; $1 < ${2:length}; $1++)",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a for statement for Razor"
			},
			"ASP.NET Core Razor - Creates a foreach statement for Razor":{
				"prefix": "rz_foreach",
				"body": [
					"@foreach (var ${1:person} in ${2:people})",
					"{",
					"\t<${3:p}>${4:Name}: @$1.$4</$3>",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a foreach statement for Razor"
			},
			"ASP.NET Core Razor - Creates a functions block for Razor":{
				"prefix": "rz_functions",
				"body": [
					"@functions {",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a functions block for Razor"
			},
			"ASP.NET Core Razor - Creates an if statement for Razor":{
				"prefix": "rz_if",
				"body": [
					"@if (${1:true})",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates an if statement for Razor"
			},
			"ASP.NET Core Razor - Creates an if else statement for Razor":{
				"prefix": "rz_ifelse",
				"body": [
					"@if (${1:true})",
					"{",
					"\t$0",
					"}",
					"else",
					"{",
					"\t$2",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates an if else statement for Razor"
			},
			"ASP.NET Core Razor - Implements an interface for Razor":{
				"prefix": "rz_implements",
				"body": [
					"@implements I${1:MyInterface}",
					"",
					"\t$0"
					],
				"description": "ASP.NET Core Razor - Implements an interface for Razor"
			},
			"ASP.NET Core Razor - Creates an inherits directive for Razor":{
				"prefix": "rz_inherits",
				"body": [
					"@inherits ${1:MyClassToInheritFrom}",
					"",
					"\t$0"
					],
				"description": "ASP.NET Core Razor - Creates an inherits directive for Razor"
			},
			"ASP.NET Core Razor - Creates an inject directive for Razor":{
				"prefix": "rz_inject",
				"body": [
					"@inject I${1:MyInterface} ${2:MyInterface}",
					"$0"
					],
				"description": "ASP.NET Core Razor - Creates an inject directive for Razor"
			},
			"ASP.NET Core Razor - Specifies the model to use for Razor":{
				"prefix": "rz_model",
				"body": [
					"@model ${1:MyModel}",
					"$0"
					],
				"description": "ASP.NET Core Razor - Specifies the model to use for Razor"
			},
			"ASP.NET Core Razor - Specifies the namespace to use for Razor":{
				"prefix": "rz_namespace",
				"body": [
					"@namespace ${1:MyNamespace}",
					"$0"
					],
				"description": "ASP.NET Core Razor - Specifies the namespace to use for Razor"
			},
			"ASP.NET Core Razor - Creates a HTML markup for Razor":{
				"prefix": "rz_raw",
				"body": [
					"@Html.Raw(\"<${1:span}>${2:Hello World}</$1>\")"
					],
				"description": "ASP.NET Core Razor - Creates a HTML markup for Razor"
			},
			"ASP.NET Core Razor - Creates a RenderBody for Razor":{
				"prefix": "rz_renderbody",
				"body": [
					"@RenderBody()"
					],
				"description": "ASP.NET Core Razor - Creates RenderBody for Razor"
			},
			"ASP.NET Core Razor - Creates a switch statement for Razor": {
				"prefix": "rz_switch",
				"body": [
					"@switch (${1:value})",
					"{",
					"\tcase ${2:value1}:",
					"\t\tbreak;",
					"\tdefault:",
					"\t\tbreak;",
					"}",
					"$0"
					],
				"description": "ASP.NET Core Razor - Creates a switch statement for Razor"
			},	
			"ASP.NET Core Razor - Creates a try catch finally for Razor":{
				"prefix": "rz_try",
				"body": [
					"@try",
					"{",
					"\t$0",
					"}",
					"catch (${1:Exception} ${2:ex})",
					"{",
					"\t<${3:p}>Error: @$2.Message</$3>",
					"}",
					"finally",
					"{",
					"\t",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a try catch finally for Razor"
			},
			"ASP.NET Core Razor - Creates an using statement for Razor":{
				"prefix": "rz_using",
				"body": [
					"@using (${1:Html.BeginForm()})",
					"{",
					"\t$0",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates an using statement for Razor"
			},
			"ASP.NET Core Razor - Creates a ViewBag for Razor": {
				"prefix": "rz_viewbag",
				"body": [
					"@ViewBag.${1:MyViewBagName}",
					"$0"
					],
				"description": "ASP.NET Core Razor - Creates a ViewBag for Razor"
			},	
			"ASP.NET Core Razor - Creates a ViewData for Razor": {
				"prefix": "rz_viewdata",
				"body": [
					"@ViewData[\"${1:myViewData}\"]",
					"$0"
					],
				"description": "ASP.NET Core Razor - Creates a ViewData for Razor"
			},	
			"ASP.NET Core Razor - Creates a while loop for Razor": {
				"prefix": "rz_while",
				"body": [
					"@{ var ${1:flag} = ${2:true}; }",
					"@while ($1)",
					"{",
					"\t$0",
					"\t$1 = ${3:false};",
					"}"
					],
				"description": "ASP.NET Core Razor - Creates a while loop for Razor"
			},	
			".NET Core - Creates a MS-Test class":{
				"prefix": "mstest",
				"body": [
					"using Microsoft.VisualStudio.TestTools.UnitTesting;",
					"using System;",
					"",
					"namespace ${1:ProjectNamespace}.Test",
					"{",
					"\t[TestClass]",
					"\tpublic class ${2:ClassName}Test",
					"\t{",
					"\t\t[TestMethod]",
					"\t\tpublic void ${3:MethodName}()",
					"\t\t{",
					"\t\t\t",
					"\t\t}",
					"\t}",
					"}"
					],
				"description": "Creates a MS-Test class with the basic usings and configurable namespace, class and method names"
			},
			"gRPC .Net 5 - Creates csproj for the Client":{
				"prefix": "gRPC_client_csproj",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
					"",
					"\t<PropertyGroup>",
					"\t\t<TargetFramework>net5.0</TargetFramework>",
					"\t</PropertyGroup>",
					"",
					"\t<ItemGroup>",
					"\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Client\" Link=\"Protos\\greet.proto\" />",
					"",
					"\t\t<PackageReference Include=\"Google.Protobuf\" Version=\"3.13.0\" />",
					"\t\t<PackageReference Include=\"Grpc.Net.Client\" Version=\"2.33.1\" />",
					"\t\t<PackageReference Include=\"Grpc.Tools\" Version=\"2.33.1\" PrivateAssets=\"All\" />",
					"\t</ItemGroup>",
					"",
					"</Project>"
				],
				"description": "gRPC .NET 5 - Creates the csproj for the Client"
			},
			"gRPC .Net 5 - Creates the Program class for a simple Client":{
				"prefix": "gRPC_client_program",
				"body": [
					"using Greet;",
					"using Grpc.Net.Client;",
					"using System;",
					"using System.Threading.Tasks;",
					"",
					"namespace Client",
					"{",
					"\tpublic class Program",
					"\t{",
					"\t\tpublic static async Task Main(string[] args)",
					"\t\t{",
					"\t\t\ttry",
					"\t\t\t{",
					"\t\t\t\tusing var channel = GrpcChannel.ForAddress(\"http://localhost:5000\");",
					"\t\t\t\tvar client = new Greeter.GreeterClient(channel);",
					"",
					"\t\t\t\tvar reply = await client.SayHelloAsync(new HelloRequest { Name = \"GreeterClient\" });",
					"\t\t\t\tConsole.WriteLine(\"Greeting: \" + reply.Message);",
					"\t\t\t}",
					"\t\t\tcatch (Exception ex)",
					"\t\t\t{",
					"\t\t\t\tConsole.WriteLine($\"ERROR: {ex.Message}\");",
					"\t\t\t}",
					"",
					"\t\t\tConsole.WriteLine(\"Shutting down\");",
					"\t\t\tConsole.WriteLine(\"Press any key to exit...\");",
					"\t\t\tConsole.ReadKey();",
					"\t\t}",
					"\t}",
					"}"
				],
				"description": "gRPC .NET 5 - Creates the Program class for the Client"
			},
			"gRPC .Net 5 - Creates a Proto sample file for the App":{
				"prefix": "gRPC_proto",
				"body": [
					"// Create a Proto folder and keep there this greet.proto file",
					"syntax = \"proto3\";",
					"",
					"package greet;",
					"",
					"// Greeting service definition",
					"service Greeter {",
					"\t// Sends a greeting",
					"\trpc SayHello (HelloRequest) returns (HelloReply);",
					"}",
					"",
					"// The request message containing the user's name",
					"message HelloRequest {",
					"\tstring name = 1;",
					"}",
					"",
					"// The response message containing the greetings",
					"message HelloReply {",
					"\tstring message = 1;",
					"}"
				],
				"description": "gRPC .NET 5 - Creates a Proto sample file for the App"
			},
			"gRPC .Net 5 - Creates csproj for the Server":{
				"prefix": "gRPC_server_csproj",
				"body": [
					"<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
					"",
					"\t<PropertyGroup>",
					"\t\t<TargetFramework>net5.0</TargetFramework>",
					"\t</PropertyGroup>",
					"",
					"\t<ItemGroup>",
					"\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Server\" Link=\"Protos\\greet.proto\" />",
					"",
					"\t\t<PackageReference Include=\"Grpc.AspNetCore\" Version=\"2.33.1\" />",
					"\t</ItemGroup>",
					"",
					"</Project>"
				],
				"description": "gRPC .NET 5 - Creates the csproj for the Server"
			},
			"gRPC .Net 5 - Creates the Program class for the Server":{
				"prefix": "gRPC_server_program",
				"body": [
					"using Microsoft.AspNetCore.Hosting;",
					"using Microsoft.Extensions.Hosting;",
					"",
					"namespace Server",
					"{",
					"\tpublic class Program",
					"\t{",
					"\t\tpublic static void Main(string[] args)",
					"\t\t{",
					"\t\t\tCreateHostBuilder(args).Build().Run();",
					"\t\t}",
					"",
					"\t\tpublic static IHostBuilder CreateHostBuilder(string[] args) =>",
					"\t\t\tHost.CreateDefaultBuilder(args)",
					"\t\t\t\t.ConfigureWebHostDefaults(webBuilder =>",
					"\t\t\t\t{",
					"\t\t\t\t\twebBuilder.UseStartup<Startup>();",
					"\t\t\t\t});",
					"\t}",
					"}"
				],
				"description": "gRPC .NET 5 - Creates the Program class for the Server"
			},
			"gRPC .Net 5 - Creates the Service class for the Server":{
				"prefix": "gRPC_server_service",
				"body": [
					"using Greet;",
					"using Grpc.Core;",
					"using Microsoft.Extensions.Logging;",
					"using System.Threading.Tasks;",
					"",
					"namespace Server",
					"{",
					"\tpublic class GreeterService : Greeter.GreeterBase",
					"\t{",
					"\t\tprivate readonly ILogger _logger;",
					"",
					"\t\tpublic GreeterService(ILoggerFactory loggerFactory)",
					"\t\t{",
					"\t\t\t_logger = loggerFactory.CreateLogger<GreeterService>();",
					"\t\t}",
					"",
					"\t\tpublic override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)",
					"\t\t{",
					"\t\t\t_logger.LogInformation($\"Sending hello to {request.Name}\");",
					"\t\t\treturn Task.FromResult(new HelloReply { Message = \"Hello \" + request.Name });",
					"\t\t}",
					"\t}",
					"}"
				],
				"description": "gRPC .NET 5 - Creates the Service class for the Server"
			},
			"gRPC .Net 5 - Creates the Settings (appsettings.json) content for the Server":{
				"prefix": "gRPC_server_settings",
				"body": [
					"{",
					"\t\"Logging\": {",
					"\t\t\"LogLevel\": {",
					"\t\t\t\"Default\": \"Information\"",
					"\t\t}",
					"\t},",
					"\t\"AllowedHosts\": \"*\",",
					"\t\"Kestrel\": {",
					"\t\t\"EndpointDefaults\": {",
					"\t\t\t\"Protocols\": \"Http2\"",
					"\t\t}",
					"\t}",
					"}"
				],
				"description": "gRPC .NET 5 - Creates the Settings (appsettings.json) content for the Server"
			},
			"gRPC .Net 5 - Creates the Startup class for the Server":{
				"prefix": "gRPC_server_startup",
				"body": [
					"using Microsoft.AspNetCore.Builder;",
					"using Microsoft.AspNetCore.Hosting;",
					"using Microsoft.Extensions.DependencyInjection;",
					"using Microsoft.Extensions.Hosting;",
					"",
					"namespace Server",
					"{",
					"\tpublic class Startup",
					"\t{",
					"\t\tpublic void ConfigureServices(IServiceCollection services)",
					"\t\t{",
					"\t\t\tservices.AddGrpc();",
					"\t\t}",
					"",
					"\t\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)",
					"\t\t{",
					"\t\t\tif (env.IsDevelopment())",
					"\t\t\t{",
					"\t\t\t\tapp.UseDeveloperExceptionPage();",
					"\t\t\t}",
					"",
					"\t\t\tapp.UseRouting();",
					"",
					"\t\t\tapp.UseEndpoints(endpoints =>",
					"\t\t\t{",
					"\t\t\t\tendpoints.MapGrpcService<GreeterService>();",
					"\t\t\t});",
					"\t\t}",
					"\t}",
					"}"
				],
				"description": "gRPC .NET 5 - Creates the Startup class for the Server"
			},
			"Extension for get the MD5 value from a stream": {
				"prefix": "ex_md5_from_stream",
				"body": [
					"public static string GetMD5(this System.IO.Stream stream)",
					"{",
					"\tstream.Position = 0;",
					"\tvar arrayByteHashValue = new System.Security.Cryptography.MD5CryptoServiceProvider().ComputeHash(stream);",
					"\treturn BitConverter.ToString(arrayByteHashValue).Replace(\"-\", String.Empty).ToLower();",
					"}"
					],
				"description": "Extension for get the MD5 value from a stream"
			},
			"Extension for convert a stream to string": {
				"prefix": "ex_stream_to_string",
				"body": [
					"public static string ToString(this System.IO.Stream stream)",
					"{",
					"\tstream.Position = 0;",
					"\treturn new System.IO.StreamReader(stream).ReadToEnd();",
					"}"
					],
				"description": "Extension for convert a stream to string"
			},
			"Extension for convert a string to stream": {
				"prefix": "ex_string_to_stream",
				"body": [
					"public static System.IO.Stream ConvertToStream(this string source)",
					"{",
					"\tvar byteArray = System.Text.Encoding.UTF8.GetBytes(source);",
					"\treturn new System.IO.MemoryStream(byteArray);",
					"}"
					],
				"description": "Extension for convert a string to stream"
			},
			"Create a CRUD API Controller": {
				"prefix": "cs-Controllers-ControllerCrud",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using API.Controllers;",
					"using API.Dtos;",
					"using AutoMapper;",
					"using Core.Entities;",
					"using Core.Interfaces;",
					"using Infrastructure.Data;",
					"using Microsoft.AspNetCore.Mvc;",
					"",
					"namespace API.Controllers",
					"{",
					"    public class EntidadController : BaseControllerApi",
					"    {",
					"        private readonly IUnitOfWork _UnitOfWork;",
					"        private readonly IMapper _mapper;",
					"",
					"        public EntidadController(IUnitOfWork unitOfWork, IMapper mapper){",
					"            _UnitOfWork = unitOfWork;",
					"            _mapper = mapper;",
					"        }",
					"",
					"        [HttpGet]",
					"        [ProducesResponseType(StatusCodes.Status200OK)]",
					"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"",
					"        public async Task<ActionResult<IEnumerable<Entidad>>> Get(){",
					"            var items = await _UnitOfWork.Entidad.GetAllAsync();",
					"            return Ok(items);",
					"        }",
					"",
					"        [HttpGet(\"{id}\")]",
					"        [ProducesResponseType(StatusCodes.Status200OK)]",
					"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
					"",
					"        public async Task<ActionResult<IEnumerable<Entidad>>> Get(int id){",
					"            var item = await _UnitOfWork.Entidad.GetByIdAsync(id);",
					"            return Ok(item); ",
					"        }",
					"",
					"        [HttpPost]",
					"        [ProducesResponseType(StatusCodes.Status200OK)]",
					"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
					"",
					"        public async Task<ActionResult<Entidad>> Post(EntidadDto itemDto){",
					"            var item = _mapper.Map<Entidad>(itemDto);",
					"            this._UnitOfWork.Entidad.Add(item);",
					"            await _UnitOfWork.SaveAsync();",
					"            if (item==null){",
					"                return BadRequest();",
					"            }",
					"            return CreatedAtAction(nameof(Post), new { id = item.Id }, item);",
					"        }",
					"",
					"        [HttpPut(\"{id}\")]",
					"        [ProducesResponseType(StatusCodes.Status200OK)]",
					"        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
					"",
					"        public async Task<ActionResult<Entidad>> Put(int id, [FromBody] Entidad item){",
					"            if (item.Id == 0){",
					"                item.Id=id;",
					"            }",
					"            if (item.Id != id){",
					"                return BadRequest();",
					"            }",
					"            if (item == null){",
					"                return NotFound();",
					"            }",
					"            _UnitOfWork.Entidad.Update(item);",
					"            await _UnitOfWork.SaveAsync();",
					"            return item;",
					"        }",
					"        [HttpDelete(\"{id}\")]",
					"        [ProducesResponseType(StatusCodes.Status204NoContent)]",
					"        [ProducesResponseType(StatusCodes.Status404NotFound)]",
					"        public async Task<ActionResult> Delete(int id){",
					"            var item = await _UnitOfWork.Entidad.GetByIdAsync(id);",
					"            if (item == null){",
					"                return NotFound();",
					"            }",
					"            _UnitOfWork.Entidad.Delete(item);",
					"            await _UnitOfWork.SaveAsync();",
					"            return NoContent();",
					"        }",
					"    }",
					"}"
				],
				"description": "Creates a CRUD API Controller"
			},
			"Create an Application Service Extension": {
				"prefix": "cs-Extensions-AppServiceExtension",
				"body": [
					"using System;",
					"using System.Collections.Generic;",
					"using System.Linq;",
					"using System.Threading.Tasks;",
					"using AspNetCoreRateLimit;",
					"using Core.Interface;",
					"using Infrastructure.UnitOfWork;",
					"",
					"namespace API.Extension",
					"{",
					"    public static class ApplicationServiceExtensions",
					"    {",
					"        public static void ConfigureCors(this IServiceCollection services)=>",
					"        services.AddCors(options =>",
					"        {",
					"            options.AddPolicy(\"CorsPolicy\", builder =>",
					"            {",
					"                builder.AllowAnyHeader() //WithOrigins(\"https://localhost:4200\")",
					"                .AllowAnyMethod()   //WithMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")",
					"                .WithOrigins(\"https://localhost:4200\"); //WithHeaders(\"accept\", \"content-type\", \"origin\", \"x-custom-header\");",
					"            });",
					"        });",
					"        public static void ConfigureRateLimiting(this IServiceCollection services)",
					"        {",
					"            services.AddMemoryCache();",
					"            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
					"            services.AddInMemoryRateLimiting();",
					"            services.Configure<IpRateLimitOptions>(options =>",
					"            {",
					"                options.GeneralRules = new List<RateLimitRule>",
					"                {",
					"                    new RateLimitRule",
					"                    {",
					"                        Endpoint = \"*\",",
					"                        Limit = 5,",
					"                        Period = \"10s\"",
					"                    },",
					"                };",
					"            });",
					"        }",
					"        public static void AddAplicationServices(this IServiceCollection services)",
					"        {",
					"            services.AddScoped<IUnitOfWork,UnitOfWork>();",
					"        }",
					"    }",
					"}"
				],
				"description": "Creates an Application Service Extension"
			},"Program.cs": {
				"prefix": "cs-programcs",
				"body": [
					"using System.Reflection;",
					"using API.Extension;",
					"using AspNetCoreRateLimit;",
					"using Infrastructure.Data;",
					"using Microsoft.EntityFrameworkCore;",
					"",
					"var builder = WebApplication.CreateBuilder(args);",
					"",
					"builder.Services.AddControllers();",
					"builder.Services.ConfigureRatelimiting();",
					"builder.Services.AddAutoMapper(Assembly.GetEntryAssembly());",
					"builder.Services.configureCors();",
					"builder.Services.AddAplicationService();",
					"builder.Services.AddEndpointsApiExplorer();",
					"builder.Services.AddSwaggerGen();",
					"",
					"builder.Services.AddDbContext<AppNotiContext>(options =>",
					"{",
					"    string connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
					"    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
					"});",
					"",
					"var app = builder.Build();",
					"",
					"if (app.Environment.IsDevelopment())",
					"{",
					"    app.UseSwagger();",
					"    app.UseSwaggerUI();",
					"}",
					"app.UseCors(\"CorsPolicy\");",
					"app.UseHttpsRedirection();",
					"app.UseIpRateLimiting();",
					"app.UseAuthorization();",
					"app.MapControllers();",
					"",
					"app.Run();"
				],
				"description": "Creates a Program.cs file"
			},
			"Codigo para la generacion de Context": {
				"prefix": "cs-Data-AppContext",
				"body": [
				  "using System.Reflection;",
				  "using Core.Entities;",
				  "using Microsoft.EntityFrameworkCore;",
				  "",
				  "namespace Infrastructure.Data;",
				  "",
				  "public class NotiAPIContext : DbContext",
				  "{",
				  "    public NotiAPIContext(DbContextOptions<NotiAPIContext> options) : base(options)",
				  "    {",
				  "    }",
				  "    DbSet<Auditoria> Auditorias { get; set; }",
				  "    DbSet<BlockChain> BlockChains { get; set; }",
				  "    DbSet<EstadoNotificacion> EstadoNotificacions { get; set; }",
				  "    DbSet<Formatos> Formatos { get; set; }",
				  "    DbSet<HiloRespuestaNotificacion> HiloRespuestaNotificacions { get; set; }",
				  "    DbSet<MaestrosVsSubmodulos> MaestrosVsSubmodulos { get; set; }",
				  "    DbSet<ModuloNotificaciones> ModuloNotificaciones { get; set; }",
				  "    DbSet<ModulosMaestros> ModulosMaestros { get; set; }",
				  "    DbSet<PermisosGenericos> PremisosGenerados { get; set; }",
				  "    DbSet<Radicados> Radicados { get; set; }",
				  "    DbSet<Rol> Roles { get; set; }",
				  "    DbSet<RolvsMaestro> RolvsMaestros { get; set; }",
				  "    DbSet<SubModulos> SubModulos { get; set; }",
				  "    DbSet<TipoNotificaciones> TipoNotificaciones { get; set; }",
				  "    DbSet<TipoRequerimiento> TipoRequerimientos { get; set; }",
				  "",
				  "    protected override void OnModelCreating(ModelBuilder modelBuilder)",
				  "    {",
				  "        base.OnModelCreating(modelBuilder);",
				  "        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
				  "    }",
				  "}",
				  ""
				],
				"description": "Codigo para la generacion de Context"
			  }
			
	}